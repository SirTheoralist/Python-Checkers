from tkinter import *
import copy
 
class draughts_board:
    def __init__(self, board):
        self.board = board

class Player:
    def __init__(self, colour):
        self.colour = colour
        self.inventory = []
    def addToInv(self, piece):
        self.inventory.append(piece)

class man(Player):
    def __init__(self, colour, symbol):
        super().__init__(colour)
        self.symbol = symbol
                    
class king(Player):
    def __init__(self, colour, symbol):
        super().__init__(colour)
        self.symbol = symbol
            
class GUI:
    def __init__(self, root, board):
        self.root = root
        self.root.title("Checkers")
        
        self.guiboard = copy.deepcopy(board)
        self.currentPlayer = None
        self.count = 1
        self.moveList = []

    def restore(self, parent):
            for widgets in parent.winfo_children():
                widgets.destroy()

    def showWin(self, winner):
        self.win = Label(self.root, text=winner.colour+" wins!")
        self.win.config(font=("Consolas", 24), bg='black', fg='white', borderwidth=5, relief="solid")
        self.win.place(relx = 0.5, rely = 0.5, anchor = CENTER)
        
    def playerNow(self, message):
        self.mes = Label(self.root, text=message)
        self.mes.config(font=("Consolas", 15), bg='black', fg='white', borderwidth=1, relief="solid")
        self.mes.grid(row = 8, columnspan = 8, sticky = 'NSEW')

    def replaceSymbols(self):
        for row in range(len(self.guiboard)):
            for col in range(8):
                if isinstance(self.guiboard[row][col][0], man) or isinstance(self.guiboard[row][col][0], king):
                    self.guiboard[row][col][0] = (self.guiboard[row][col][0]).symbol

    def makeBoard(self):
        self.replaceSymbols()
        
        self.frames = []
        for rowNum, row in enumerate(self.guiboard):
            frame = Frame(self.root)
            frame.grid(row = rowNum)
            self.frames.append(frame)
            self.update_row(rowNum)

    def update_row(self, rowNum):
##        print ("Updating row", rowNum)
        self.restore(self.frames[rowNum])
        for colNum, position in enumerate(self.guiboard[rowNum]):
##            print (colNum, self.guiboard[rowNum][colNum][0], end = ' ')
            self.square = Label(self.root, text = self.guiboard[rowNum][colNum][0],
                                font = ("Consolas", 45), height = 1, width = 2, borderwidth = 1, relief = "solid")
            self.square.grid(row=rowNum, column=colNum, sticky = 'NSEW')
            if (rowNum%2 == colNum%2 == 0) or (rowNum%2 == colNum%2 == 1):
                self.square.config(bg = 'grey15')
            else:
                self.square.config(bg = 'grey75')
                self.square.bind('<ButtonPress-1>', lambda event, index = [rowNum, colNum]: self.makeList(event, index))
                self.square.bind('<ButtonPress-3>', lambda event, index = [rowNum, colNum]: self.makeList(event, index))
##        print ()

    def listLoop(self):
        hasMoved = False
        for move in range(len(self.moveList) - 1):
            moveFrom = [self.moveList[move][0], self.moveList[move][1]]
            moveTo = [self.moveList[move + 1][0], self.moveList[move + 1][1]]
            if checkMove(moveFrom, moveTo, self.currentPlayer):
                hasMoved = True
                
            if hasMoved:
                self.guiboard = copy.deepcopy(checkers.board)
                self.replaceSymbols()
                self.update_row(moveFrom[0])
                self.update_row(moveTo[0])
                playerSwap()

    def makeList(self, event, index):
        if event.num == 1:
            if self.count == 1:
                self.moveList = []
                self.moveList.append(index)
                self.count = 0
            else:
                self.moveList.append(index)
                self.count = 1
                self.listLoop()
                
        if event.num == 3:
            self.moveList.append(index)
                         
' ==================================== CheKers ==================================== '
def checkMove(move, destination, player):
    moveFrom = checkers.board[move[0]][move[1]]
    moveTo = checkers.board[destination[0]][destination[1]]
    
    if moveFrom[0] == ' ':
        return False
    
    if moveFrom[0].colour != player.colour:
        return False
    
    if moveTo[0] != ' ':
        return False
    
    if checkCapture(move, destination, player):
        if checkCrowning(destination, player):
            return True
        return True

    if (moveFrom[0] == blackMan and (moveTo[1] - moveFrom[1] in [3, 4, 5])) or (moveFrom[0] == whiteMan and (moveFrom[1] - moveTo[1] in [3, 4, 5])):
        moveFrom[0], moveTo[0] = ' ', moveFrom[0]
        if checkCrowning(destination, player):
            return True
        return True

    if isinstance(moveFrom[0], king) and (moveTo[1] - moveFrom[1] in [3, 4, 5, -3, -4, -5]):
        moveFrom[0], moveTo[0] = ' ', moveFrom[0]
        return True
    
    return False
    
def checkCapture(move, destination, player):
    moveFrom = checkers.board[move[0]][move[1]]
    moveTo = checkers.board[destination[0]][destination[1]]
    
    if moveFrom[0] == blackMan:
        if destination[0] - move[0] == destination[1] - move[1] == 2:
            captured = [move[0] + 1, move[1] + 1]
        if [destination[0] - move[0], destination[1] - move[1]] == [2, -2]:
            captured = [move[0] + 1, move[1] - 1]
                                        
        if 'captured' in locals() and checkers.board[captured[0]][captured[1]][0] not in [blackMan, blackKing]:
            moveTo[0], moveFrom[0] = moveFrom[0], moveTo[0]
            player.addToInv(checkers.board[captured[0]][captured[1]])
            checkers.board[captured[0]][captured[1]][0] = ' '
            gui.guiboard = copy.deepcopy(checkers.board)
            gui.replaceSymbols()
            gui.update_row(captured[0])
            return True

        if 'captured' in locals():
            if checkers.board[captured[0]][captured[1]][0] in [blackMan, blackKing] or checkers.board[captured[0]][captured[1]][0] == ' ':
                return False
        
    if moveFrom[0] == whiteMan:
        if destination[0] - move[0] == destination[1] - move[1] == -2:
            captured = [move[0] - 1, move[1] - 1]
        if [destination[0] - move[0], destination[1] - move[1]] == [-2, 2]:
            captured = [move[0] - 1, move[1] + 1]
                                        
        if 'captured' in locals() and checkers.board[captured[0]][captured[1]][0] not in [whiteMan, whiteKing]:
            moveTo[0], moveFrom[0] = moveFrom[0], moveTo[0]
            player.addToInv(checkers.board[captured[0]][captured[1]])
            checkers.board[captured[0]][captured[1]][0] = ' '
            gui.guiboard = copy.deepcopy(checkers.board)
            gui.replaceSymbols()
            gui.update_row(captured[0])
            return True

        if 'captured' in locals():
            if checkers.board[captured[0]][captured[1]][0] in [whiteMan, whiteKing] or checkers.board[captured[0]][captured[1]][0] == ' ':
                return False

    if isinstance(moveFrom[0], king):
        
        if destination[0] - move[0] == destination[1] - move[1] == 2:
            captured = [move[0] + 1, move[1] + 1]
        if [destination[0] - move[0], destination[1] - move[1]] == [2, -2]:
            captured = [move[0] + 1, move[1] - 1]
        if destination[0] - move[0] == destination[1] - move[1] == -2:
            captured = [move[0] - 1, move[1] - 1]
        if [destination[0] - move[0], destination[1] - move[1]] == [-2, 2]:
            captured = [move[0] - 1, move[1] + 1]
            
        if 'captured' in locals() and checkers.board[captured[0]][captured[1]][0].colour != player.colour:
            moveTo[0], moveFrom[0] = moveFrom[0], moveTo[0]
            player.addToInv(checkers.board[captured[0]][captured[1]])
            checkers.board[captured[0]][captured[1]][0] = ' '
            gui.guiboard = copy.deepcopy(checkers.board)
            gui.replaceSymbols()
            gui.update_row(captured[0])
            return True

        if 'captured' in locals():
            if checkers.board[captured[0]][captured[1]][0].colour == player.colour or checkers.board[captured[0]][captured[1]][0] == ' ':
                return False
        
def checkCrowning(destination, player):
    moveTo = checkers.board[destination[0]][destination[1]]
    
    if moveTo[0] == blackMan and destination[0] == 7 :
        moveTo[0] = blackKing
        gui.guiboard = copy.deepcopy(checkers.board)
        gui.replaceSymbols()
        gui.update_row(7)
        return True
    
    if moveTo[0] == whiteMan and destination[0] == 0 :
        moveTo[0] = whiteKing
        gui.guiboard = copy.deepcopy(checkers.board)
        gui.replaceSymbols()
        gui.update_row(0)
        return True
    
def gameEnd(board, player):
    if len(black.inventory) == 12:
        return (True, black)
    if len(white.inventory) == 12:
        return (True, white)

def playerSwap():
    global colour
    player = black if colour==1 else white
    gui.currentPlayer = player
    gui.playerNow(gui.currentPlayer.colour)
    if gameEnd(checkers.board, player):
        winner = gameEnd(checkers.board, player)[1]
        gui.showWin(winner)
    colour = 2 if colour == 1 else 1

def playGame():
    gui.restore(gui.root)
    gui.makeBoard()
    gui.guiboard = checkers.board
    colour = 1
    playerSwap()
    gui.root.mainloop()

def printHelp():
    gui.restore()
    gui.helpMessage()
       
' ==================================== CheKers ==================================== '

black = Player("Black")
blackMan = man("Black", '⛂')
blackKing = blackKing = king("Black", '⛃')

white = Player("White")
whiteMan = man("White", '⛀')
whiteKing = king("White", '⛁')

checkers = draughts_board([[[' '], [blackMan, 1], [' '], [blackMan, 2], [' '], [blackMan, 3], [' '],[blackMan, 4]],
                        [[blackMan, 5], [' '], [blackMan, 6], [' '], [blackMan, 7], [' '], [blackMan, 8], [' ']],
                        [[' '], [blackMan, 9], [' '], [blackMan, 10], [' '], [blackMan, 11], [' '], [blackMan, 12]],
                        [[' ', 13], [' '], [' ', 14], [' '], [' ', 15], [' '], [' ', 16], [' ']],
                        [[' '], [' ', 17], [' '], [' ', 18], [' '], [' ', 19], [' '], [' ', 20]],
                        [[whiteMan, 21], [' '], [whiteMan, 22], [' '], [whiteMan, 23], [' '], [whiteMan, 24], [' ']],
                        [[' '], [whiteMan, 25], [' '], [whiteMan, 26], [' '], [whiteMan, 27], [' '], [whiteMan, 28]],
                        [[whiteMan, 29], [' '], [whiteMan, 30], [' '], [whiteMan, 31], [' '], [whiteMan, 32], [' ']]])

gui = GUI(Tk(), checkers.board)
colour = 1
playGame()
gui.root.mainloop()
